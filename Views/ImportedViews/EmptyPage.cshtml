@model UniverseObjects.Controllers.HomeController.AudioVideoConfigurationObjects

@{
    ViewBag.Title = "BARE MIN 3D WITH TOOLS";
    Layout = "~/Views/Shared/_LayoutPhone.cshtml";
}
<script src="~/Scripts/jquery-3.7.1.js"></script>
<script src="~/Scripts/jquery-simple-upload.js"></script>
<script src="~/Scripts/swiper-bundle.js"></script>

<script src="~/threejs/build/three.js"></script>
<script src="~/threejs/build/tween.js"></script>
<script src="~/threejs/build/OrbitControls.js"></script>
<script src="~/threejs/build/TTFLoader.js"></script>
<script src="~/threejs/build/GLTFLoader.js"></script>
<script src="~/threejs/build/DeviceOrientationControls.js">
</script>


@{
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
    var jsonModel = serializer.Serialize(Model);
}
<script>
    var audioVideoConfigurationObjects = @Html.Raw(jsonModel);
    window.avSources = audioVideoConfigurationObjects.AVSources;
    var avSources = window.avSources;
    window.mediaFiles = audioVideoConfigurationObjects.MediaFiles;
    var mediaFiles = window.mediaFiles;

    var swiperMedia;
    var currentCameraFocusObjectName;
    var currentVideoPlayer;
    var videoObject;
    var currentControlsVector;

</script>

<head>
    <style>
        * {
            -webkit-user-select: none; /* Safari */
            -ms-user-select: none; /* IE 10 and IE 11 */
            user-select: none; /* Standard syntax */
        }

        .range {
            margin: auto;
        }

        .swiper {
            height: 100%;
            width: 100%;
        }

        .swiper-wrapper {
        }

        .swiper-slide {
            width: 40vmax;
            height: 40vmax;
        }

            .swiper-slide img {
            }


        .swiper-media {
            width: 100%;
            overflow: hidden;
            position: relative;
            top: 0px;
            z-index: 100;
        }


        .swiper-slide-media {
            font-family: Audiowide;
            padding: 10px;
            overflow: hidden;
        }

        .swiper-pagination-bullet {
            color: #ff0000;
        }

        .swiper-pagination-bullet-active {
            color: #ffffff;
        }

        .popupMenu {
            position: absolute;
            top: 20vh;
            right: 10px;
            width: 50vw;
            height: 50vh;
            visibility: hidden;
            opacity: 0;
            font-size: clamp(12px, 1.2vmax, 42px);
            /*        background-image: radial-gradient(at 47% 33%, hsl(225.00, 0%, 0%) 0, transparent 59%), radial-gradient(at 82% 65%, hsl(210.01, 100%, 50%) 0, transparent 55%);
        */
        }

        .visualizer-container {
            position: absolute;
            bottom: 0px;
            width: 100%;
            text-align: center;
            max-height: 30vh;
            height: 30vh;
            z-index: 9;
            background-color: transparent;
            visibility: hidden;
        }

        .visualizer-container__bar {
            display: inline-block;
            background-color: transparent;
        }

        .eqSliderContainer {
            max-height: 30vh;
            height: 30vh;
            display: inline-block;
            bottom: 0px;
            text-align: center;
            z-index: 101;
            background-color: transparent;
        }

        .eqRange {
            position: absolute;
            height: 30vh;
            max-height: 30vh;
            display: inline-block;
            bottom: 0px;
            background-color: transparent;
            transform: rotate(-90deg);
            transform-origin: top left;
            width: 100%;
            z-index: 299;
        }


        .themedUIEqualizerBar {
            bottom: 0px;
            transform-style: preserve-3d;
            cursor: pointer;
            display: inline-block;
            box-shadow: 9px 8px 43px 19px rgba(255,255,255,0.7);
            -webkit-box-shadow: 9px 8px 43px 19px rgba(255,255,255,0.7);
            -moz-box-shadow: 9px 8px 43px 19px rgba(255,255,255,0.7);
            z-index: 102;
        }

        .frequencyLevelDIV {
            position: absolute;
            display: inline-block;
            background: transparent;
            z-index: 103;
        }

        .frequencyManipulator {
            position: absolute;
            height: 30vh;
            max-height: 30vh;
            display: inline-block;
            bottom: 0px;
            background-color: transparent;
            transform: rotate(-90deg);
            transform-origin: top left;
            width: 100%;
            z-index: 299;
        }


        #dropZone {
            width: 100%;
            height: 100vh;
            visibility: hidden;
        }

        #rawAudioData {
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100%;
            height: 30vh;
            display: grid;
            grid-template-rows: 1vmax;
            grid-template-columns: repeat(auto-fit, 1vmax);
            grid-row-gap: 2px;
            grid-column-gap: 2px;
            justify-content: center;
            overflow: auto;
            visibility: hidden;
        }
    </style>

</head>

<body>
    <div id="subMenu"
         class="pageTopMenu
                themedBackground
                themedUIHighlight
                uiMenu"
         style="position: absolute; top: 7vh; z-index: 999;">


        <div id="sourcesSelector">
            <select id="AVSourcesSelector"
                    class="
                            themedUIBackground
                            themedUIHighlight
                            buttons">
            </select>
        </div>


        <div id="menuItemVisualizer">
            <select id="showAudioVisualizer"
                    class="mainMenuBarDropDownSelect
                           themedUI
                           themedUIBackground
                            buttons"
                    oninput="processVisualizerOptionsDropDown({
                                 visualizer: null,
                                 action: null,
                                 options: null,
                                 string: this.value})">
                <option value="NONE">NONE</option>
                <option value="rawAudio">RAW AUDIO</option>
                <option value="eqBottom">EQ BOTTOM</option>
                <option value="eqLeft">EQ LEFT</option>
                <option value="eqHidden">EQ HIDDEN</option>
                <option value="Beta">PARTICLES</option>
            </select>
        </div>
        <div id="dbMenuBar" class="dbMenuBar"
             style="">
        </div>
    </div>

    <div id="infoMarqueeContainer"
         class="
                themedUI
                themedUIHighlight"
         style="position: absolute;
                width: 100%;
                bottom: 0px;
                left: 0px;
                font-size: clamp(10px, .9vmax, 14px);
                z-index: 999999;
                background-color: transparent;
                color: #ff0000;
                text-shadow: 1px 1px #ff0000">

        <marquee id="nowPlayingMarquee" class="themedUI">
            <label id="nowPlaying" class="themedUI">
            </label>
        </marquee>
    </div>


    <div id="navigationContainer"
         style="
                position: absolute;
                top: 5vh;
                left: 10vw;
                width: 80vw;
                height: 80vh;">
        @{Html.RenderAction("Navigation", "Home");}
    </div>


    <div id="mediaPlayerControlsContainer"
         style="
                position: absolute;
                top: 0px;
                width: 100%;
                height: 100%;
                left: 0px;">
        @{Html.RenderAction("VRControls", "Home");}
    </div>




    <div id="webGL"
         style="position: absolute;
                top: 0px;
                left: 0px;
                width: 100vw;
                height: 100vh;">
    </div>



    <div id="visualizer-container"
         class="visualizer-container actionableElement"
         style="position: absolute">
    </div>
</body>


<script>


    initializeScene();
    scene = window.scene;

    //var mediaPlayerControlsMesh;
    //createMediaPlayerControls();

    scene.background = loadEnvironment("/images/equirectangularenvironments/smallSeaCity.jpg");
    scene.environment = loadEnvironment("/images/equirectangularenvironments/smallSeaCity.jpg");

    createSpotLight();

    try {
        ambientLight = new THREE.AmbientLight();
        ambientLight.intensity = 1;
        scene.add(ambientLight);
        ambientLight.name = "defaultAmbientLight";
        window.ambientLight = ambientLight;
    } catch {
    }

    window.renderDIV = "webGL";
    setupRenderer("webGL");
    setupCamera();
    setupControls();

    var lightOrbitTime = .01;

    function animate(time) {
        requestAnimationFrame(animate);
        TWEEN.update(time);

        var audioContext = window.audioContext;

        processGlobalAnimations();

        if (audioContext != undefined) {
            getFrequencyData();
            if (window.equalizerComponent != undefined) {
                setEqualizerBarScales();
            }
        }
        var rawAudioDataContainer =
            document.getElementById("rawAudioDataDropDown");

        if (rawAudioDataContainer != undefined) {
            if (rawAudioDataContainer.style.visibility == 'visible') {
                if (window.audioContext != undefined) {
                    updateRawAudioIntegers({
                        parentContainerID: "rawAudioData"
                    });
                }
            }
        }
        var animationType =
            document.getElementById("animationSelector").value;

        //var masterSpotLight =
        //window.scene.children[window.scene.findIndex(o => o.name == 'masterSpotLight')];



        controls.update();
        renderer.render(scene, camera);
    }

    function render() {
        animate(performance.now());
    }

    document.body.onresize = function () {
        var width = window.innerWidth;
        var height = window.innerHeight;
        window.renderer.setSize(width, height);
        window.camera.aspect = width / height;
        window.camera.updateProjectionMatrix();

    }

    document.body.onresize();

    render();

    //createSensor({
    //    sensorType: 'Accelerometer',
    //    sensorID: 'Accelerometer1',
    //    sensorName: 'GenericAccelerometer',
    //    informationDIVID: "randomSensorData"
    //});

    $(document).ready(function () {
        swiperMedia = new Swiper(".swiper-media", {
            //effect: 'coverflow',
            grabCursor: false,
            centeredSlides: true,
            slidesPerView: 'auto',
            ////coverflowEffect: {
            ////    rotate: 40,
            ////    stretch: 10,
            ////    depth: 450,
            ////    modifier: 1,
            ////    slideShadows: false,
            ////},
            loop: true,
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            }
        });
        swiperMedia.slideTo(2, false, false);

        setupObjectVariableVectorListeners();

        buildObjectSelector({
            objectType: 'Scene',
            selectElementID: 'sceneObjectSelector',
            parentContainerID: 'sceneObjectSelectorContainer'
        });

        document.getElementById("fullScreenNavigation")
            .addEventListener("click", function (event) {
                toggleFullScreenNavigation();
            });

        ajaxRenderDIV({
            divToPopulate: 'dbMenuBar',
            pageToRenderURL: '/ApplicationUIElements/MenuBar?uielementgroupid=4'
        });


    });


    var currentMousePositionX = 0;
    var currentMousePositionY = 0;

    addListeners({ type: 'rangeControls' });


    //var defaultVideoPlayer =
    //    document.getElementById(window.videoPlayers[0]);

    //if (defaultVideoPlayer != undefined) {

    //    defaultVideoPlayer
    //        .addEventListener("ended", function (event) {
    //            var randomIndex =
    //                Math
    //                    .round(
    //                        audioVideoConfigurationObjects.MediaFiles.Data.length *
    //                        Math.random());

    //            var mediaFileName =
    //                audioVideoConfigurationObjects.MediaFiles
    //                    .Data[randomIndex].Name;

    //            var media =
    //                window.currentLoggedInUser_rootDirectory + "/" +
    //                mediaFileName;

    //            var newRandomMedia =
    //                media;

    //            changeVideoPlayerMedia({
    //                media: newRandomMedia,
    //                videoPlayerName: window.videoPlayers[0].name
    //            });

    //        });
    //}

</script>
