
@{
    Layout = "/views/universeobjects/_RenderObjectLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <script src="/threejs/three.js.oldbuild/three.min.js"></script>
    <script src="~/threejs/three.js.oldbuild/OrbitControls.js"></script>
    <script src="~/threejs/three.js.oldbuild/GLTFLoader.js"></script>
    <script src="~/threejs/three.js.oldbuild/TTFLoader.js"></script>
    <script src="~/threejs/three.js.oldbuild/tween.js"></script>

    <link href="~/Content/vailware.stylesheet.master.css" rel="stylesheet" />
    <script src="~/Scripts/vailware.universeModeling.library.js"></script>
</head>
<body>
    <div>

    </div>
    <script>
        function createRenderer({
            universeObject,
            containerId
        }) {
            var container = document.getElementById(containerId);
            if (container == undefined) {
                var container =
                    document.createElement('div');
                container.setAttribute('Id', "universeRenderer");
                container.style.width = "100%";
                container.style.height = "100%";
                document.body.append(container);
            }
            container =
                document.getElementById("universeRenderer");

            var webGL = document.createElement('div');
            webGL.setAttribute('Id', "webGL");
            webGL.style.position = "absolute";
            webGL.style.top = "0px;";
            webGL.style.left = "0px;";
            webGL.style.width = "100%";
            webGL.style.height = "100%";
            container.append(webGL);

            initializeScene({ sceneName: "universeRenderer" });
            setupCamera({ cameraName: undefined });

            window.rendererElementId = "webGL";

            setupRenderer({
                rendererElementId: "webGL",
                rendererId: "universeRenderer"
            });

            setupControls({
                cameraName: "universeRenderer",
                rendererName: "universeRenderer"
            });
        }

        function createAmbientLight() {
            ambientLight = new THREE.AmbientLight();
            ambientLight.intensity = 1;
            scene.add(ambientLight);
            ambientLight.name = "defaultAmbientLight";
            window.ambientLight = ambientLight;
        }

        function createStarMap() {
            window.scene.background = loadEnvironment("/images/universe/starmap_8k.png");
        }

        function animateUniverse(time) {
            requestAnimationFrame(animateUniverse);
            TWEEN.update(time);

            //camera.position.x =
            //    imaginaryObject.position.x +
            //    (orbitDistance * Math.sin(cameraOrbitTime) + 0);

            //camera.position.z =
            //    imaginaryObject.position.z +
            //    (orbitDistance * Math.cos(cameraOrbitTime) + 0);

            //cameraOrbitTime += orbitalVelocity;

            controls.update();
            window.renderer.render(window.scene, window.camera);
        }

        function tweenToUniverseObject({
            universeObject,
            duration
        }) {

            if (universeObject == undefined) {
                var targetVector = new THREE.Vector3(
                    0, 0, 70000);
            }

            if (duration == undefined) {
                duration = 10000;
            }

            var intialVector = new THREE.Vector3(
                window.camera.position.x,
                window.camera.position.y,
                window.camera.position.z
            );

            var controlsTargetVector = new THREE.Vector3(
                universeObject.UniverseObjectPositionVectorX,
                universeObject.universeObjectPositionVectorY,
                universeObject.UniverseObjectPositionVectorZ);

            var targetVector = new THREE.Vector3(0, 0, -7000000);

            var position = new THREE.Vector3().copy(camera.position);

            var tween = new TWEEN.Tween(position)
                .to({ x: 3500000, y: - 3500000, z: 70000000 }, duration)
                .easing(TWEEN.Easing.Exponential.InOut)
                .onUpdate(function () {
                    camera.position.copy(position);
                })
                .onComplete(function () {
                    var tween = new TWEEN.Tween(position)
                        .to({ x: 0, y: 0, z: -1400000 }, duration)
                        .easing(TWEEN.Easing.Exponential.InOut)
                        .onUpdate(function () {
                            camera.position.copy(position);
                        })
                        .onComplete(function () {

                        }).start();

                }).start();

            //var target = new THREE.Vector3().copy(controls.target);

            //var tween = new TWEEN.Tween(target)
            //        .to(controlsTargetVector, duration)
            //        .easing(TWEEN.Easing.Exponential.InOut)
            //        .onUpdate(function () {
            //            controls.target.copy(target);
            //        })
            //        .onComplete(function () {

            //        }).start();

            //catch (error) {
            //    console.log(
            //        "tweenTo universeObject failed." +
            //        "Maybe: " +
            //        "fucking moving..." +
            //        "initial vectors in database wrong..." +
            //        "a damn database failure, some other shit I cant think of?");
            window.controls.enabled = true;
            window.controls.update();

        }

        function render() {
            animateUniverse(performance.now());
        }

        document.body.onresize = function () {
            var width = window.innerWidth;
            var height = window.innerHeight;
            window.renderer.setSize(width, height);
            window.camera.aspect = width / height;
            window.camera.updateProjectionMatrix();
        }

        //createUniverseObject({ universeObjectId: 1500, universeObjectTypeId: 100 });
        //createUniverseObject({ universeObjectId: 1100, universeObjectTypeId: 200 });
        createRenderer({ universeObject: window.universeObject });
        createAmbientLight();
        createStarMap();
        loadUniverseGLBObject({
            name: "algodonesDowntown.glb",
            _Path: "/GLBObjects/",
            fullName: "/GLBObjects/algodonesDowntown.glb",
            scalar: 1000,
            positionX: 0,
            positionY: 0,
            positionZ: 0,
            quaternionX: 0,
            quaternionY: 0,
            quaternionZ: 0,
            quaternionW: 0,
            alias: "algodonesDowntown",
            universeObjectId: undefined,
            universeObjectGLBId: undefined,
            GLBObjectPath: "/GLBObjects"
        });

        window.controls.target.set(0, 0, 0);


        document.body.onresize();
        render();

    </script>
</body>
</html>
