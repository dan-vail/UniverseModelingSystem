@model UniverseObjects.Models.UniverseObject

@{
    ViewBag.Title = "Create";
    //Layout = "~/Views/Shared/_UniverseObjectRendererLayout.cshtml";
    Layout = null;
}

<script>

    function addDataValidationListeners() {
        document.getElementById('UniverseObjectName')
            .addEventListener('keypress', function () {
                if (validateData({
                    expectedType: 'number',
                    data: this.value}) == true) {
                    destroyAlertElement({
                        alertElementId: 'alertElementTesting'
                    });
                } else {
                    createAlertElement({
                        columnName: 'UniverseObjectName',
                        message: 'Failed validation. DBType = nvarchar. JavascriptType = string.',
                        containerElementId: 'alertElementContainer'
                    });
                }
            })
    }

    function destroyAlertElement({
        alertElementId
    }) {
        var alertElement =
            document.getElementById(alertElementId);

        if (alertElement != undefined) {
            alertElement.remove();
            return true;
        } else {
            return false;
        }
    }

    function createAlertElement({
        columnName,
        message,
        containerElementId
    }) {

        var containerElement = document.getElementById(containerElementId);
        if (containerElement == undefined) {
            return false;
        }

        var alertElement = document.createElement('label');
        alertElement.innerHTML =
            "Column: " +
            columnName +
            ". " +
            "Message: " + message + ".";
        containerElement.append(alertElement);
    }

    function createFormDataObject() {
        var formData = new FormData();

        formData.append('UniverseObjectName',
            document.getElementById('UniverseObjectName').value);


        formData.append('UniverseObjectDescription',
            document.getElementById('UniverseObjectDescription').value);

        formData.append('UniverseObjectPositionVectorX',
            document.getElementById('UniverseObjectPositionVectorX').value);

        formData.append('UniverseObjectPositionVectorY',
            document.getElementById('UniverseObjectPositionVectorY').value);

        formData.append('UniverseObjectPositionVectorZ',
            document.getElementById('UniverseObjectPositionVectorZ').value);

        formData.append('UniverseObjectQuaternionVectorX',
            document.getElementById('UniverseObjectQuaternionVectorX').value);

        formData.append('UniverseObjectQuaternionVectorY',
            document.getElementById('UniverseObjectQuaternionVectorY').value);

        formData.append('UniverseObjectQuaternionVectorZ',
            document.getElementById('UniverseObjectQuaternionVectorZ').value);

        formData.append('UniverseObjectQuaternionVectorW',
            document.getElementById('UniverseObjectQuaternionVectorW').value);

        formData.append('UniverseObjectIsSpheroid',
            document.getElementById('UniverseObjectIsSpheroidbit').value);

        formData.append('UniverseObjectIsPlasma',
            document.getElementById('UniverseObjectIsPlasma').value);

        formData.append('UniverseObjectHasEventHorizon',
            document.getElementById('UniverseObjectHasEventHorizon').value);

        formData.append('UniverseObjectParentID',
            document.getElementById('UniverseObjectParentID').value);

        formData.append('UniverseObjectOrbitalEccentricity',
            document.getElementById('UniverseObjectOrbitalEccentricity').value);

        formData.append('UniverseObjectAregumentOfPeriapsis',
            document.getElementById('UniverseObjectAregumentOfPeriapsis').value);

        formData.append('UniverseObjectOrbitalTrueAnomoly',
            document.getElementById('UniverseObjectOrbitalTrueAnomoly').value);

        formData.append('UniverseObjectOrbitalOmegaLongitude',
            document.getElementById('UniverseObjectOrbitalOmegaLongitude').value);

        formData.append('UniverseObjectOrbitalSemiMajorAxis',
            document.getElementById('UniverseObjectOrbitalSemiMajorAxis').value);

        formData.append('UniverseObjectOrbitalInclination',
            document.getElementById('UniverseObjectOrbitalInclination').value);

        formData.append('UniverseObjectMass',
            document.getElementById('UniverseObjectMass').value);

        formData.append('UniverseObjectEquirectangularTextureMapPath',
            document.getElementById('UniverseObjectEquirectangularTextureMapPath').value);

        formData.append('UniverseObjectParentDescription',
            document.getElementById('UniverseObjectParentDescription').value);

        formData.append('UniverseObjectEquirectangularVectorDisplacementMapPath',
            document.getElementById('UniverseObjectEquirectangularVectorDisplacementMapPath').value);

        formData.append('UniverseObjectUseEquirectangularVectorDisplacementMap',
            document.getElementById('UniverseObjectUseEquirectangularVectorDisplacementMap').value);

        formData.append('UniverseObjectUseEquirectangularTextureMap',
            document.getElementById('UniverseObjectUseEquirectangularTextureMap').value);

        formData.append('UniverseObjectWireframeColor',
            document.getElementById('UniverseObjectWireframeColor').value);

        formData.append('UniverseObjectEquirectangularVideoTexturePath',
            document.getElementById('UniverseObjectEquirectangularVideoTexturePath').value);
        UniverseObjectAtmosphereEquirectangularVectorDisplacementMaptext

        //UniverseObjectUseAtmosphereEquirectangularTextureMap
        //UniverseObjectAtmosphereEquirectangularTextureMapPath
        //UniverseObjectGLBObjectID
        //UniverseObjectGLBObjectID
        //UniverseObjectInitialTemporalArgumentbigint
        //UniverseObjectRendererMaterialIDbigint
        //UniverseObjectGeometryIDint
        //UniverseObjectTypeIDint NOT
        //UniverseObjectRecordBorndatetime
        //UniverseObjectUniverseContainerIDbigint
        //UniverseObjectRecordCreatedByUserIDbigint
        //UnierseObjectRecordModifieddatetime
        //UniverseObjectRecordModifiedByUserIDbigint

    }

    window.addEventListener("load", event => {
        addDataValidationListeners();
    });

    function postFormDataAsync({
        formDataObject
    }) {

        var UniverseObject = new Object();
        UniverseObject = formDataObject;

        var createNewUniverseObjectPostURL = '/UniverseObjects/Create'
        var request = new request(createNewUniverseObjectPostURL);

        fetch(createNewUniverseObjectPostURL, {
            method: post,
            body: UniverseObject,
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        })
            .then(response => response.json())
            .then(data => {
                //To be implemented give response to post from controller
            })
    }

</script>
<style>
    .formWrapper {
        font-size: clamp(14px, 1.4vmax, 26px);
        background: transparent;
        color: #00ff00;
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        overflow: auto;
    }

    .extendedFormControls {
        font-size: clamp(14px, 1.4vmax, 26px);
        background: transparent;
        color: #00ffff;
        width: 50%;
    }

    .extendedSelectElement {
        font-size: clamp(14px, 1.4vmax, 26px);
        background: transparent;
        color: #00ffff;
        width: 50%;
    }

    .controlLabelExtended {
        font-size: clamp(14px, 1.4vmax, 26px);
        text-shadow: 1px 1px #808080;
        background: transparent;
        color: #00ffff;
        width: 50%;
    }
</style>

<div class="col-md-offset-2 col-md-10">
    <input type="submit" value="CREATE" class="buttons"
           onclick="createFormDataObject()" />
</div>


<div id="alertElementContainer"
     style="position: absolute;
             right: 0px;
             bottom: 0px;
             font-size: clamp(16px, 2vmax, 24px);
             z-index: 99999;">
    <label id="alertElementTestingA">TESTING DATA VALIDATION...</label>
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="formWrapper">


        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectName, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectName, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectDescription, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectDescription, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectPositionVectorX, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectPositionVectorX, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectPositionVectorX, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectPositionVectorY, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectPositionVectorY, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectPositionVectorY, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectPositionVectorZ, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectPositionVectorZ, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectPositionVectorZ, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectQuaternionVectorX, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectQuaternionVectorX, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectQuaternionVectorX, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectQuaternionVectorY, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectQuaternionVectorY, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectQuaternionVectorY, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectQuaternionVectorZ, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectQuaternionVectorZ, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectQuaternionVectorZ, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectQuaternionVectorW, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectQuaternionVectorW, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectQuaternionVectorW, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectIsSpheroid, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectIsSpheroid)
                        @Html.ValidationMessageFor(model => model.UniverseObjectIsSpheroid, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectIsPlasma, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectIsPlasma)
                        @Html.ValidationMessageFor(model => model.UniverseObjectIsPlasma, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectHasEventHorizon, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectHasEventHorizon)
                        @Html.ValidationMessageFor(model => model.UniverseObjectHasEventHorizon, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectParentID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectParentID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectParentID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectOrbitalEccentricity, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectOrbitalEccentricity, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectOrbitalEccentricity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectAregumentOfPeriapsis, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectAregumentOfPeriapsis, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectAregumentOfPeriapsis, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectOrbitalTrueAnomoly, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectOrbitalTrueAnomoly, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectOrbitalTrueAnomoly, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectOrbitalOmegaLongitude, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectOrbitalOmegaLongitude, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectOrbitalOmegaLongitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectOrbitalSemiMajorAxis, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectOrbitalSemiMajorAxis, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectOrbitalSemiMajorAxis, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectOrbitalInclination, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectOrbitalInclination, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectOrbitalInclination, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectMass, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectMass, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectMass, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectEquirectangularTextureMapPath, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectEquirectangularTextureMapPath, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectEquirectangularTextureMapPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectParentDescription, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectParentDescription, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectParentDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectEquirectangularVectorDisplacementMapPath, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectEquirectangularVectorDisplacementMapPath, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectEquirectangularVectorDisplacementMapPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectUseEquirectangularVectorDisplacementMap, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectUseEquirectangularVectorDisplacementMap)
                        @Html.ValidationMessageFor(model => model.UniverseObjectUseEquirectangularVectorDisplacementMap, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectUseEquirectangularTextureMap, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectUseEquirectangularTextureMap)
                        @Html.ValidationMessageFor(model => model.UniverseObjectUseEquirectangularTextureMap, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectUseEquirectangularVideoTextureMap, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectUseEquirectangularVideoTextureMap)
                        @Html.ValidationMessageFor(model => model.UniverseObjectUseEquirectangularVideoTextureMap, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectWireframeColor, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectWireframeColor, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectWireframeColor, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectHasAtmosphere, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectHasAtmosphere)
                        @Html.ValidationMessageFor(model => model.UniverseObjectHasAtmosphere, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectEquirectangularVideoTexturePath, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectEquirectangularVideoTexturePath, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectEquirectangularVideoTexturePath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectAtmosphereEquirectangularVectorDisplacementMap, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectAtmosphereEquirectangularVectorDisplacementMap, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectAtmosphereEquirectangularVectorDisplacementMap, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectUseAtmosphereEquirectangularTextureMap, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox extendedSelectElement themedUI themedUIBackground">
                        @Html.EditorFor(model => model.UniverseObjectUseAtmosphereEquirectangularTextureMap)
                        @Html.ValidationMessageFor(model => model.UniverseObjectUseAtmosphereEquirectangularTextureMap, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectAtmosphereEquirectangularTextureMapPath, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectAtmosphereEquirectangularTextureMapPath, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectAtmosphereEquirectangularTextureMapPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectGLBObjectID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectGLBObjectID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectGLBObjectID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectInitialTemporalArgument, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectInitialTemporalArgument, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectInitialTemporalArgument, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectRendererMaterialID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectRendererMaterialID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectRendererMaterialID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectGeometryID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectGeometryID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectGeometryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectTypeID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectTypeID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectTypeID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectRecordBorn, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectRecordBorn, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectRecordBorn, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectUniverseContainerID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectUniverseContainerID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectUniverseContainerID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectRecordCreatedByUserID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectRecordCreatedByUserID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectRecordCreatedByUserID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UnierseObjectRecordModified, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UnierseObjectRecordModified, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UnierseObjectRecordModified, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UniverseObjectRecordModifiedByUserID, htmlAttributes: new { @class = "control-label controlLabelExtended themedUI  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UniverseObjectRecordModifiedByUserID, new { htmlAttributes = new { @class = "form-control extendedFormControls themedUI themedUIBackground" } })
                    @Html.ValidationMessageFor(model => model.UniverseObjectRecordModifiedByUserID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
            </div>
        </div>
    </div>
}

